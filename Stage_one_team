# Question 1
def dna_translation(dna_sequence):
    Genetic_code = {
        "ATA": "I", "ATC": "I", "ATT": "I", "ATG": "M",
        "ACA": "T", "ACC": "T", "ACG": "T", "ACT": "T",
        "AAC": "N", "AAT": "N", "AAA": "K", "AAG": "K",
        "AGC": "S", "AGT": "S", "AGA": "R", "AGG": "R",
        "CTA": "L", "CTC": "L", "CTG": "L", "CTT": "L",
        "CCA": "P", "CCC": "P", "CCG": "P", "CCT": "P",
        "CAC": "H", "CAT": "H", "CAA": "Q", "CAG": "Q",
        "CGA": "R", "CGC": "R", "CGG": "R", "CGT": "R",
        "GTA": "V", "GTC": "V", "GTG": "V", "GTT": "V",
        "GCA": "A", "GCC": "A", "GCG": "A", "GCT": "A",
        "GAC": "D", "GAT": "D", "GAA": "E", "GAG": "E",
        "GGA": "G", "GGC": "G", "GGG": "G", "GGT": "G",
        "TCA": "S", "TCC": "S", "TCG": "S", "TCT": "S",
        "TTC": "F", "TTT": "F", "TTA": "L", "TTG": "L",
        "TAC": "Y", "TAT": "Y", "TAA": "*", "TAG": "*",
        "TGC": "C", "TGT": "C", "TGA": "*", "TGG": "W"
    }
      
    # Initialize protein sequence 
    protein = ''

    # Translate each codon
    for i in range(0, len(dna_sequence), 3):
        codon = dna_sequence[i:i + 3]
        if len(codon) == 3:
            protein += Genetic_code.get(codon, "?")  # '?' for unknown codons
    
    return protein

#Example usage
dna_sequence = "ATGGCCATTGTAATGGGCCGCTGAAAGGGTGCCCGATAG"
protein_sequence = dna_translation(dna_sequence)
print(protein_sequence)




# Question 2
import matplotlib.pyplot as plt
import math

def generate_growth_curves(k,initial_x,x):
    equation = 1/(1+math.exp(-k*(x-initial_x)))
    return equation
    
curves = []
for i in range(0,24):
    num_curves = generate_growth_curves(2,5,i)
    new_curves = curves.append(num_curves)
    
x=range(0,24)
y=curves
plt.plot(x, y, '--o')


# Question 3
def generate_growth_curves(k,initial_x,x):
    import math
    equation = 1/(1+math.exp(-k*(x-initial_x)))
    return equation
    
curves = []
for i in range(0,24):
    num_curves = generate_growth_curves(0.5,10,i)
    new_curves = curves.append(num_curves)
    
x=range(0,24)
y=curves
plt.plot(x, y, '--o')
plt.title('Logistic Curve')
plt.xlabel('Time')
plt.ylabel('Population Size')


#Question 4
import matplotlib.pyplot as plt
import math
import random

def generate_growth_curves(k, initial_x, x):
    equation = 1 / (1 + math.exp(-k * (x - initial_x)))
    return equation

# Function to determine time to reach 80% of carrying capacity
def time_to_80_percent(k, initial_x):
    target_population = 0.8
    time = (1 / k) * math.log((1 / target_population) - 1) + initial_x
    return time

# Randomize the initial conditions
k = 2  
initial_x = random.randint(5, 10)  
curves = []



# Generate growth curves for 24 time points
for i in range(0, 24):
    num_curves = generate_growth_curves(k, initial_x, i)
    curves.append(num_curves)


x = range(0, 24)

# Plot the growth curve
plt.plot(x, curves, '--o', label='Population Growth Curve')
plt.axhline(y=0.8, color='r', linestyle='--', label='80% Carrying Capacity')
plt.title('Logistic Population Growth Curve')
plt.xlabel('Time')
plt.ylabel('Population Size')
plt.legend()
plt.grid()
plt.show()

# Calculate and print the time to reach 80% of carrying capacity
time_at_80 = time_to_80_percent(k, initial_x)
print(f"Time to reach 80% of carrying capacity: {time_at_80:.2f} time units")
